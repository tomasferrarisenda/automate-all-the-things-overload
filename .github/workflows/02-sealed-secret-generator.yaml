name: 02-Sealed secret generator

on:
  workflow_dispatch:
    inputs:
      DEV_REDIS_SECRET:
        description: 'Introduce the password for the DEV ElastiCache DB'
        required: true
      STAGE_REDIS_SECRET:
        description: 'Introduce the password for the STAGE ElastiCache DB'
        required: true
      PROD_REDIS_SECRET:
        description: 'Introduce the password for the PROD ElastiCache DB'
        required: true

env:
  AWS_REGION: us-east-1 # This value was modified by the initial-setup python script
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  APP_NAME: greek # This value was modified by the initial-setup python script


jobs:
  generate-sealed-secrets:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Kubeseal CLI tool
        run: | 
          KUBESEAL_VERSION='0.24.0'
          wget "https://github.com/bitnami-labs/sealed-secrets/releases/download/v${KUBESEAL_VERSION:?}/kubeseal-${KUBESEAL_VERSION:?}-linux-amd64.tar.gz"
          tar -xvzf kubeseal-${KUBESEAL_VERSION:?}-linux-amd64.tar.gz kubeseal
          sudo install -m 755 kubeseal /usr/local/bin/kubeseal

      - name: Configure kubeconfig
        run: aws eks --region $AWS_REGION update-kubeconfig --name $APP_NAME-cluster

      - name: Create secret manifests to be sealed
        run: | 
          echo "apiVersion: v1
          kind: Secret
          metadata:
            name: redis-secret
            namespace: $APP_NAME-dev
          type: Opaque
          data:
            REDIS_PASS: $(echo -n ${{ github.event.inputs.DEV_REDIS_SECRET }} | base64)" > dev-secret.yaml

          echo "apiVersion: v1
          kind: Secret
          metadata:
            name: redis-secret
            namespace: $APP_NAME-stage
          type: Opaque
          data:
            REDIS_PASS: $(echo -n ${{ github.event.inputs.STAGE_REDIS_SECRET }} | base64)" > stage-secret.yaml

          echo "apiVersion: v1
          kind: Secret
          metadata:
            name: redis-secret
            namespace: $APP_NAME-prod
          type: Opaque
          data:
            REDIS_PASS: $(echo -n ${{ github.event.inputs.PROD_REDIS_SECRET }} | base64)" > prod-secret.yaml

      # - name: Create secret manifests to be sealed
      #   run: | 
      #     # GitHub token
      #     # kubectl create secret generic github-token --dry-run=client -n backstage --from-literal=GITHUB_TOKEN='$(echo -n ${{ github.event.inputs.GITHUB_TOKEN }} | base64)' -o yaml > github-token-secret.yaml
      #     kubectl create secret generic github-token --dry-run=client -n backstage --from-literal=GITHUB_TOKEN="${{ github.event.inputs.GITHUB_TOKEN }}" -o yaml > github-token-secret.yaml

      #     # Database passwords
      #     # kubectl create secret generic redis-secret --dry-run=client -n $APP_NAME-dev --from-literal=REDIS_PASS='$(echo -n ${{ github.event.inputs.DEV_REDIS_SECRET }} | base64)' -o yaml > dev-secret.yaml
      #     kubectl create secret generic redis-secret --dry-run=client -n $APP_NAME-dev --from-literal=REDIS_PASS="${{ github.event.inputs.DEV_REDIS_SECRET }}" -o yaml > dev-secret.yaml

      #     # kubectl create secret generic redis-secret --dry-run=client -n $APP_NAME-stage --from-literal=REDIS_PASS='$(echo -n ${{ github.event.inputs.STAGE_REDIS_SECRET }} | base64)' -o yaml > stage-secret.yaml
      #     kubectl create secret generic redis-secret --dry-run=client -n $APP_NAME-stage --from-literal=REDIS_PASS="${{ github.event.inputs.STAGE_REDIS_SECRET }}" -o yaml > stage-secret.yaml

      #     # kubectl create secret generic redis-secret --dry-run=client -n $APP_NAME-prod --from-literal=REDIS_PASS='$(echo -n ${{ github.event.inputs.PROD_REDIS_SECRET }} | base64)' -o yaml > prod-secret.yaml
      #     kubectl create secret generic redis-secret --dry-run=client -n $APP_NAME-prod --from-literal=REDIS_PASS="${{ github.event.inputs.PROD_REDIS_SECRET }}" -o yaml > prod-secret.yaml

      - name: Encrypt the json secrets with Kubeseal
        run: | 
          kubeseal --controller-namespace sealed-secrets --controller-name sealed-secrets < dev-secret.yaml > dev-sealed-secret.json 
          kubeseal --controller-namespace sealed-secrets --controller-name sealed-secrets < stage-secret.yaml > stage-sealed-secret.json 
          kubeseal --controller-namespace sealed-secrets --controller-name sealed-secrets < prod-secret.yaml > prod-sealed-secret.json 

      - name: Get the value of REDIS_PASS
        run: | 
          cat dev-sealed-secret.json | jq -r '.spec.encryptedData.REDIS_PASS' > dev-encrypted-pass.txt
          cat stage-sealed-secret.json | jq -r '.spec.encryptedData.REDIS_PASS' > stage-encrypted-pass.txt
          cat prod-sealed-secret.json | jq -r '.spec.encryptedData.REDIS_PASS' > prod-encrypted-pass.txt

      - name: Set the encrypted value in the values of each environment
        run: | 
          sed -i "s|redis_pass:.*|redis_pass: $(cat dev-encrypted-pass.txt | tr -d '\n') # This value was modified by the sealed-secrets pipeline|g" helm/my-app/backend/environments/values-dev.yaml
          sed -i "s|redis_pass:.*|redis_pass: $(cat stage-encrypted-pass.txt | tr -d '\n') # This value was modified by the sealed-secrets pipeline|g" helm/my-app/backend/environments/values-stage.yaml
          sed -i "s|redis_pass:.*|redis_pass: $(cat prod-encrypted-pass.txt | tr -d '\n') # This value was modified by the sealed-secrets pipeline|g" helm/my-app/backend/environments/values-prod.yaml 

      - name: Commit changes to GitHub
        run: |
          git pull
          git config --global user.email "GitHubActions@SealedSecretWorkflow.com"
          git config --global user.name "GitHub Actions - Sealed Secret Workflow"
          git add helm/my-app/backend/environments/values-dev.yaml    
          git add helm/my-app/backend/environments/values-stage.yaml    
          git add helm/my-app/backend/environments/values-prod.yaml 
          git commit -m "Sealed secrets created by GitHub Actions"
          git push
